from blist import btuple
import numpy

__author__ = 'Emanuele Tamponi'


class TermsError(Exception):
    pass


class CategoryInfo(object):

    def __init__(self, category, documents, terms, frequencies, children):
        self.category = category
        self.documents = documents
        self.terms = terms
        self.frequencies = frequencies
        self.children = children


class CategoryGroup(object):

    def __init__(self, *infos):
        if len(infos) == 1 and isinstance(infos[0], btuple):
            self.categories = infos[0]
        else:
            self.categories = btuple(infos)
        self.terms = self.categories[0].terms

    def __add__(self, other):
        return CategoryGroup(self.categories + other.categories)

    def __iter__(self):
        return iter(self.categories)

    def __getitem__(self, item):
        return self.categories.__getitem__(item)

    def __len__(self):
        return len(self.categories)

    def build_parent_info(self):
        if len(self.categories) == 1:
            return self.categories[0]
        categories = sorted(ci.category for ci in self.categories)
        merged_category = "(" + "+".join(categories) + ")"
        merged_documents = sum(ci.documents for ci in self.categories)
        merged_frequencies = sum(ci.frequencies for ci in self.categories)
        return CategoryInfo(merged_category, merged_documents, self.terms, merged_frequencies, self)


class CategoryInfoBuilder(object):

    def __init__(self, terms):
        self.terms = numpy.asarray(sorted(terms))
        self.term_positions = {term: i for i, term in enumerate(self.terms)}

    def build_leaf(self, category, documents, term_frequencies):
        full_frequencies = numpy.zeros(len(self.terms))
        for term, frequency in term_frequencies.iteritems():
            full_frequencies[self.term_positions[term]] = frequency
        return CategoryInfo(category, documents, self.terms, full_frequencies, None)

    def build_parent(self, *children):
        if any(ci.terms is not self.terms for ci in children):
            raise TermsError("Cannot merge children not generated by me")
        return CategoryGroup(*children).build_parent_info()
